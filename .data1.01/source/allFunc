#!/bin/bash

clear
echo "========================="
echo "Loading PadFunctions"



#ALLOFTHEFUNCTIONS

function inputDs3 {
#sticks

inputStickX1="$(tail -n 1 ~/.data/ds3 | cut -c 4-6 | tr -d " ")"
inputStickY1="$(tail -n 1 ~/.data/ds3 | cut -c 11-14 | tr -d " ")"

inputStickX2="$(tail -n 1 ~/.data/ds3 | cut -c 19-21 | tr -d " ")"
inputStickY2="$(tail -n 1 ~/.data/ds3 | cut -c 26-29 | tr -d " ")"

#Dpad
inputDpadUp="$(tail -n 1 ~/.data/ds3 | cut -c 34-37 | tr -d " ")"
inputDpadDown="$(tail -n 1 ~/.data/ds3 | cut -c 41-43 | tr -d " ")"
inputDpadLeft="$(tail -n 1 ~/.data/ds3 | cut -c 48-51 | tr -d " ")"
inputDpadRight="$(tail -n 1 ~/.data/ds3 | cut -c 55-58 | tr -d " ")"


#misc
inputSelect="$(tail -n 1 ~/.data/ds3 | cut -c 67-67 | tr -d " ")"
inputPs="$(tail -n 1 ~/.data/ds3 | cut -c 72-72 | tr -d " ")"
inputStart="$(tail -n 1 ~/.data/ds3 | cut -c 80-80 | tr -d " ")"


#trigger
inputLTrigger3="$(tail -n 1 ~/.data/ds3 | cut -c 86-86 | tr -d " ")"
inputRTriger3="$(tail -n 1 ~/.data/ds3 | cut -c 91-91 | tr -d " ")"
inputLTrigger1="$(tail -n 1 ~/.data/ds3 | cut -c 124-126 | tr -d " ")"
inputRTrigger1="$(tail -n 1 ~/.data/ds3 | cut -c 131-133 | tr -d " ")"
inputLTrigger2="$(tail -n 1 ~/.data/ds3 | cut -c 139-141 | tr -d " ")"
inputRTrigger2="$(tail -n 1 ~/.data/ds3 | cut -c 146-149 | tr -d " ")"


#Buttons
inputTriangle="$(tail -n 1 ~/.data/ds3 | cut -c 97-100 | tr -d " ")"
inputCircle="$(tail -n 1 ~/.data/ds3 | cut -c 103-105 | tr -d " ")"
inputCross="$(tail -n 1 ~/.data/ds3 | cut -c 109-112 | tr -d " ")"
inputSquare="$(tail -n 1 ~/.data/ds3 | cut -c 115-118 | tr -d " ")"
}



function inputDs3ToScroll {
	cat $menuTypeDoc | head -n ${y1Value[10]} | tail -n 10
}


#inputDs3 to Move

function inputDs3ToMove {

	if (( $y1Value < $scrollLimitDown )) #This limits the scroll down
	then

		if (( $inputStickY1 > 160 ))
		then
			((y1Value[0]++))
			((y1Value[1]++))
			((y1Value[2]++))
			((y1Value[3]++))
			((y1Value[4]++))
			((y1Value[5]++))
			((y1Value[6]++))
			((y1Value[7]++))
			((y1Value[8]++))
			((y1Value[9]++))
			((y1Value[10]++))
			sleep 0.07
		fi
	fi

	if (( $y1Value > $scrollLimitUp )) #This elif allows you to not scroll pass 0
	then
		if (( $inputStickY1 < 100 )) #set 0 to 100 for default/renable
		then
			((y1Value[0]--))
			((y1Value[1]--))
			((y1Value[2]--))
			((y1Value[3]--))
			((y1Value[4]--))
			((y1Value[5]--))
			((y1Value[6]--))
			((y1Value[7]--))
			((y1Value[8]--))
			((y1Value[9]--))
			((y1Value[10]--))
			sleep 0.07
		fi
	fi

}


#ds3 to dpad
function inputDpadToMove {

	if (( $y1Value < $scrollLimitDown )) #This limits the scroll down
	then

		if (( $inputDpadDown > 10 ))
		then
			((y1Value[0]++))
			((y1Value[1]++))
			((y1Value[2]++))
			((y1Value[3]++))
			((y1Value[4]++))
			((y1Value[5]++))
			((y1Value[6]++))
			((y1Value[7]++))
			((y1Value[8]++))
			((y1Value[9]++))
			((y1Value[10]++))
			sleep 0.07
		fi
	fi

	if (( $y1Value > $scrollLimitUp )) #This elif allows you to not scroll pass 0
	then
		if (( $inputDpadUp > 10 )) #set 0 to 100 for default/renable
		then
			((y1Value[0]--))
			((y1Value[1]--))
			((y1Value[2]--))
			((y1Value[3]--))
			((y1Value[4]--))
			((y1Value[5]--))
			((y1Value[6]--))
			((y1Value[7]--))
			((y1Value[8]--))
			((y1Value[9]--))
			((y1Value[10]--))
			sleep 0.07
		fi
	fi

}



function inputDs3ToScroll {
	cat $menuTypeDoc | head -n ${y1Value[10]} | tail -n 10
}
#                            
#Currently this does nothing 
function menuTransfer {
	menuObject[${y1Value[0]}]=${menuMain[0]}
	menuObject[${y1Value[1]}]=${menuMain[1]}
	menuObject[${y1Value[2]}]=${menuMain[2]}
	menuObject[${y1Value[3]}]=${menuMain[3]}
	menuObject[${y1Value[4]}]=${menuMain[4]}
	menuObject[${y1Value[5]}]=${menuMain[5]}
	menuObject[${y1Value[6]}]=${menuMain[6]}
					

}

function networkStatus {
	networkWlanStatus="$(iwconfig wlan0 | head -n 7 | tail -n 1 | cut -c 24-28)"
	echo " "
	echo " "
	echo "      WLan0 status - $networkWlanStatus     |||  BSSID -  $networkWlanName  |||  Default GW - $networkWlanDefault"
	echo "      Lan0 status - $networkLanStatus  |||  MAC  -  $networkLanName  |||  Default GW- $networkLanDefault"
}

function networkStatusCheck {
	networkWlanStatus="$(iwconfig wlan0 | head -n 7 | tail -n 1 | cut -c 24-28)"
	networkWlanName="$(iwconfig wlan0 2> /dev/null | awk -F\" '{print $2}' | head -n 1)"
	networkWlanDefault="$(ip route | grep wlan0 | cut -d" " -f3 | head -n 1)"
	networkLanStatus="$(nmcli | grep eth0 | head -n 1 | cut -d" " -f2)"
	networkLanName="$(ifconfig | grep ether | head -n 1 | tr -d " " | cut -c 6-22)"
	networkLanDefault="$(ip route | grep eth0 | cut -d" " -f3 | head -n 1)"
	echo " "
	echo " "
	echo "      WLan0 status - $networkWlanStatus     |||  BSSID -  $networkWlanName  |||  Default GW - $networkWlanDefault"
	echo "      Lan0 status - $networkLanStatus  |||  MAC  -  $networkLanName  |||  Default GW- $networkLanDefault"
}

function sleepSmall {
	sleep 0.01
}

#menuFunctions for each menu

function menuMainSelect {
	if (( $inputCross > 1 ))
	then
		${menuMainSource[${y1Value[0]}]}
	fi
}

function menuAttackSelect {
	if (( $inputCross > 1 ))
	then
		${menuMainAttackSource[${y1Value[0]}]}
	fi
}

function menuMonSelect {
	if (( $inputCross > 1 ))
	then
		${menuMainMonSource[${y1Value[0]}]}
	fi
}

function menuBoxSelect {
	if (( $inputCross > 1 ))
	then
		${menuMainBoxSource[${y1Value[0]}]}
	fi
}

function menuIntSelect {
	if (( $inputCross > 1 ))
	then
		${menuMainIntSource[${y1Value[0]}]}
	fi
}

function menuConfigSelect {
if (( $inputCross > 1 ))
then
	${menuConfigSource[${y1Value[0]}]}
fi
}



#returns to main menu on circle press
function menuBack {
	if (( $inputCircle > 1 ))
	then
		/usr/sbin/main
	fi
}


function buttonStatus {
	echo "(1yValue- ${y1Value[0]}"
	echo "(Circle - $inputCircle"
	echo "(  X    - $inputCross"
}

function importController {
	echo "Loading"
	controller=0
	controller="$(ps aux | grep xbox > /root/.data/source/xbox && cat /root/.data/source/xbox |  grep xboxdrv | cut -c 10-14 | tr -d " ")"
	if ((controller < 1 ))
	then
	xterm -e xboxdrv --detach-kernel-driver --led 2 > /root/.data/ds3
fi
}




#Declare Vars

	#declare controller sticks
	y1Value[0]=0
	y1Value[1]=1
	y1Value[2]=2
	y1Value[3]=3
	y1Value[4]=4
	y1Value[5]=5
	y1Value[6]=6
	y1Value[7]=7
	y1Value[8]=8
	y1Value[9]=9
	y1Value[10]=10
	y1Value[11]=11
	y1Value[12]=12
	y1Value[13]=13
	y1Value[14]=14
	y1Value[15]=15
	y1Value[16]=16
	y1Value[17]=17
	y1Value[18]=18
	y1Value[19]=19
	y1Value[20]=20

	x1Value[0]=0
	x1Value[1]=1
	x1Value[2]=2
	x1Value[3]=3
	x1Value[4]=4

	scrollLimitUp=0
	scrollLimitDown=6

#variable grab declerations

	declare -a varGrab=('varItem0' 'varItem1' 'varItem2' 'varItem3' 'varItem4' 'varItem5')

#menu declarations to use in menu__ and menu__Source
	declare -a menuSub=(') Documentation' ') OM Terminal' ') Exit')
	declare -a menuSubSource=('/root/.data/menusub/doc' '/root/.data/menusub/inside' '/root/.data/menusub/exit')


	declare -a menuMain=('0)Variable Grabbing' '1)Configuration' '2) Attacks' ') OM Terminal' ') Exit')
	declare -a menuMainSource=('/root/.data/main/vargrab' '/root/.data/main/config' '/root/.data/main/attacks' '/root/.data/inside' '/root/.data/main/exit')

	declare -a menuVarGrab=('0) Rescan All List' '1) Ip Host')
	declare -a menuVarGrabSource=('/root/.data/vargrab/rescanlist' '/root/.data/vargrab/hostlist')

	declare -a menuMainAttack=('0) AirSuiteAttack' '1) Arpspoof' '2) Capture Interface')
	declare -a menuMainAttackSource=('/root/.data/attack/airsuite' '/root/.data/attack/arpspoof' '/root/.data/attack/captureint')

	declare -a menuMainInt=('0)ifconfig' '1)iwconfig' '2)nmcli' '3) OM Terminal')
	declare -a menuMainIntSource=('ifconfig' 'iwconfig' 'nmcli n && nmcli' '/root/.data/inside')

	declare -a menuMainConfig=('0)interfaces' '1) N/A')
	declare -a menuMainConfigSource=('/root/.data/config/interfaces/')

	declare -a menuMainMon=('0) top' '1) htop' '2) atop' '3) iftop' '4) iotop' '5) iptraf' '6) nmap')
	declare -a menuMainMonSource=('top' 'htop' 'atop' 'iftop' 'iotop' 'iptraf' 'root/.data/mon/nmap')

	declare -a menuMainBox=('0) BoxMap' '1) BoxIpTraffic')
	declare -a menuMainBoxSource=('/root/.data/box/boxmap' '/root/.data/box/boxiptraf')
	#Useless atm
	#declare -a menuObject=('object0' 'object1' 'object2' 'object3' 'object4' 'object5' 'object6' 'object7' 'object8' 'object9' 'object10' 'object11' 'object12' 'object13')

